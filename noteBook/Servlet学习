四、 HttpServletResponse对象
	4.1 介绍
		1. HTTPServletResponse接口来自于Servlet规范中， 在Tomcat中的servlet-api包中。
		2. HttpServletResponse对象由Http服务器提供。
		3. HttpServletResponse负责将doGet和doPost方法的返回结果写入到【响应体】交给浏览器。
		
	4.2主要功能
		1. 将执行结果以二进制形式写入到【响应体】中。
				PrintWriter out = response.getWriter();
				out.write();// 该方法可以写 【字符】【字符串】【ASCII码】， 如果out.write(50);那么前端会显示为 2，因为 2 对应的ASCII码就是 2。
				out.print();// 方法可以以任意的数据写到响应体中。
		2. 设置响应头中[content-type]属性值，控制浏览器使用对应编译器将响应体二进制数据编译为【文字、图片、视频、命令】
		3. 这只响应头中[location]属性，将一个请求地址复制给location，控制浏览器向指定服务器发送请求。
		

五、HttpServletRequest对象
	5.1 作用
		1. 可以读取Http请求协议包中【请求行】中的URL信息
		2. 可以读取保存在Http协议包中【请求头】或【请求体】中参数信息
		3. 可以代替浏览器想http服务器申请资源文件调用。
		
		【URI】：资源文件的精准定位地址，实际上是url中截取的字符串。字符串格式"/网站名/资源文件名"
		可以通过request.getRequestURI();方法获取URI。	
		
		
		问题：  【POST请求参数乱码问题】
				当用Get 方式请求，当参数是中文是，后端接收到的参数是正常的中文。
				但是当用 POST方式请求时，参数是中文时， 后端接收到的是【乱码】。
		
		原因：	浏览器以GET方式请求，请求参数保存在【请求头】中， 在HTTP请求协议包到达服务器之后，第一件事就是进行解码，【请求头】二进制内容由Tomcat负责
				解码， Tomcat9.0默认使用【UTF-8】字符集，可以解释一切国家文字。
				
				但是当用POST方式请求时，请求参数保存在【请求体】中，HTTP请求协议包到达服务器之后，第一件事进行解码，但是【请求体】的二进制内容是由当前的
				请求对象（Request对象）负责解码的。request对象默认使用【ISO-8859-1】（东欧语系字符集）字符集进行解码。如果请求体参数中有中文，将无法解码，
				只能得到乱码。
				
		解决方案：
				通知请求对象（request），使用UTF-8字符集对请求的二进制内容进行解码。
				request.setCharacterEncoding("UTF-8");
		
		
		
六、请求和响应对象request、response对象的生命周期。
		1. Http服务器接收到浏览器发送的【Http请求协议包】， 自动为当前的【Http请求协议包】生成一个request对象和一个response对象。并传给doGet或doPost方法。
		2. 在Http服务器准备推送Http响应协议包之前，负责将本次请求关联的【请求对象】、【响应对象】销毁。
		
		【请求对象】和【响应对象】生命周期贯穿一次请求处理过程。
		
七、多个Servlet之间的调用规则，【重定向】和【请求转发】
	
		1. 重定向
			工作原理：当第一个Servlet服务完成后， 【响应对象】设置重定向，通知浏览器去请求第二个Servlet。 浏览器获取到重定向的状态码（302）之后，浏览器会自动获取到
			  【响应对象】的location属性，拿到要访问的第二个Servlet地址，然后去访问。
			实现：
				response.sendRedirect("请求地址"); // 将地址写入到location响应头中。
			
			特点：
				- 请求地址：既可以把当前网站内部的资源文件地址发送给浏览器（/网站名/资源路径），
							也可以把其他网站资源文件地址发送给浏览器（网址）
				- 请求次数：一次重定向请求过程中，浏览器至少向服务器发送两次请求。
				- 请求方式：重定向的请求方式是【GET】请求。
				- 请求地址发生了改变，改变为重定向之后的请求地址了。
				
			重定向缺点：重定向解决方案需要在浏览器和服务器之间多次交互，大量时间消耗在交互上，增加用户等待服务时间。
				
		2. 请求转发
				工作原理：用户第一次请求浏览器访问oneServlet，第一个Servlet工作完成后，通过当前的请求对象代替浏览器向Tomcat发送请求，申请调用twoServlet，Tomcat接收到请求后
					自动调用twoServlet来完成剩余任务。
				
				实现：【请求对象】代替浏览器向Tomcat发送请求.
				// 通过当前请求对象生成资源文件申请报告对象.
				RequestDispatcher report = request.getRequestDispatcher("/资源文件名"); // 一定要以"/"开头。 不能访问外部网站。不能写网站名
				report.forward(当前请求对象, 当前响应对象);  // Tomcat会获取到请求对象的请求协议包，所以请求转发的请求方式和浏览器第一次访问的请求方式一样。
		
				优点：Servlet之间的调用发生在服务端，减少了浏览器和服务端的交互。
				
				特点：
					- 请求次数：请求转发过程中，浏览器只发送一次请求。
					- 请求地址：请求地址只能调用当前网站下资源文件地址，不可以是外部的资源文件。
					- 请求方式：【get】和【post】都可以。在请求转发过程中，浏览器只发送了一个Http请求协议包。参与本次请求的所有Servlet共享同一个请求协议包，因此
					这些Servlet接收的请求方式与第一次发送的请求方式保持一致。 
					

八、ServletContext接口【全局作用域对象】
	1. 介绍
		来自于Servlet规范中的接口。在Tomcat中存在servlet-api.jar， 在Tomcat中负责提供这个接口实现类。
	
	2. 全局作用域对象生命周期：
		- 在Http服务器启动时，自动为当前网站在内存中创建一个全局作用域对象。
		- 在Http服务器运行期间，一个网站只有一个全局作用域对象。该对象一直处于存活状态。
		- 在Http服务器准备关闭时，该作用域对象会进行销毁处理。
	
		
		
	3. 实现：
		ServletContext application = request.getServletContext();  // 通过请求对象获取到全局作用域对象
		application.setAttribute("key1", "value1");
		
		
		// 从全局作用域对象中获取值
		String value1 = application.getAttribute("key1");
		
九、Cookie
	1. 介绍
		- Cookie来自Servlet规范中的一个工具类。存在Tomcat提供的servlet-api.jar包中。
		- 如果两个Servlet来自于同一个网站，并为同一个浏览器/用户提供服务，此时，借助于cookie对象进行数据共享。
		- cookie存放当前用户的私人数据，在共享数据过程中提高服务质量。
		
	2. 原理
		用户通过浏览器第一次向服务器发送请求oneServlet，oneServlet在运行期间创建一个Cookie存储与当前用户相关数据。
		OneServlet工作完毕后，将【Cookie】写入到响应头中交给浏览器。浏览器收到响应包之后，将Cookie存储在浏览器的缓存。
		一段时间过后用户通过【同一个浏览器】再次向该网站发送请求申请Servlet时，
		【浏览器会无条件的将之前存储的Cookie写入到请求头中】发送到后端。
		此时TwoServlet就可以通过读取请求头中cookie信息，得到OneServlet提供的共享数据
		
	3. 实例：同一个网站 OneServlet和TwoServlet借助于Cookie实现数据共享。
			OneServlet:
			
				// 创建Cookie对象，保存共享数据（当前用户数据）
				Cookie cookie = new Cookie("key", "value"); //key不能是中文 
				response.addCookie(cookie);
			
			用户在下次访问该网站的TwoServlet时，浏览器会自动将Cookie添加在请求头中，传给后端。
			
			TwoServlet获取Cookie：
			
			
			Cookie[] cookies = request.getCookies();
		
	4. Cookie的声明周期
		- 默认情况下，Cookie存储在浏览器的缓存中， 因此只要浏览器关闭，Cookie对象就会自动销毁掉。
		- 手动情况下，可以要求浏览器将接收的Cookie存放在硬盘中，在存活时间范围内，都不会导致Cookie被销毁。
		
		cookie.setMaxAge(60);// 设置Cookie的存活时间60秒。
		

十、 HttpSession接口
		1. 介绍：HttpSession接口来自于Servlet规范下的一个接口。存在于servlet-jar.api包中。称为【会话作用域对象】
		2. HttpSession 与Cookie的区别
			- 存储位置：Cookie存放在浏览器缓存或硬盘中， HttpSession存放在服务器的内存中。
			- 存储类型：Cookie存储的共享数据类型只能是String。 而HttpSession可以存储任意类型。
			- 数据数量：一个Cookie只能存储一个键值对key&value； 而HttpSession使用map存储共享数据，可以存放任意共享数据。
			
		3. HttpSession的获取方式：
			HttpSession session = request.getSession();// 获取HttpSession
			session.setAttribute(key, 共享数据); // 往HttpSession中存放共享数据.
			
			Object object = session.getAttribute(key); // 其他Servlet获取共享数据方式。
			
		4. Http服务器 如何将用户/浏览器 和 HttpSession 关联起来的？（不同的用户发起请求，
			后端根据请求对象获取到的HttpSession，HttpSession中可以根据不同用户返回各自用户保存的数据。怎么做到的）
			 使用cookie关联起来的，原理如下
			【浏览器用户和HttpSession关联的原理】：
				用户第一次发起请求后，Servlet如果用request.getSession()为当前用户缓存了该用户的数据，那么Tomcat会自动创建
				一个该HttpSession的Cookie(name=JSESSIONID),并随着响应体返回给浏览器。当该浏览器进行下次请求的时候，
				会自动携带这个名为JSESSIONID的Cookie，Servlet再次获取HttpSession对象时，会拿到响应头中的Cookie，并
				判断有没有name=JSESSIONID的 Cookie，如果有，则根据SESSIONID的值从内存中获取到对应的HttpSession。
				
		5.  getSession() 与getSession(false);
				getSession() : 如果当前请求对象已经拥有了HttpSession对象，那么要求Tomcat将携带这个session对象的sessionId 的Cookie返回。
				如果没有HttpSession对象，那么创建一个HttpSession对象，并创建一个Cookie(key为JSESSIONID，value为HttpSession对象的id )，
				将该Cookie写到响应头中，返回给浏览器。
			getSession(false)： 如果没有HttpSession对象，返回null，不给响应头中添加JSSIONID的cookie。
				可以利用这两个方法的区别来做“防止用户恶意登录”的功能，即：用户要访问web服务器里的资源，必须先登录，如果没有登录，就不能通过url地址访问web服务器里的其他资源。
				方法：做一个过滤器，过滤web资源里的所有资源；如果遇到登录的Servlet，则放行，登录的Servlet中运用request.getSession()来给用户分配一个Session。
				如果用户登录成功，获取用户的HttpSession。此时，用户已经有了一个SessionId;下次
				该用户在访问该网站的时候，在过滤器里会根据getSession(false)去判断这个用户有没有HttpSession，如果没有，则说明用户是没有登录的，拦截返回就好了，如果有。那么
				方形去访问具体的web资源。
		
		6. HttpSession的销毁时机
			
			- 用户与HttpSession关联时使用的Cookie只能存放在浏览器的缓存中，在浏览器关闭时，Cookie失效，但是Tomcat无法检测到Cookie何时失效(浏览器何时关闭)
				因此浏览器关闭时，并不会导致Tomcat将浏览器关联的HttpSession进行销毁。 为了解决这个问题，Tomcat会为每个HttpSession对象设置一个【空闲时间】，
				默认30分钟，当【空闲时间】过后，Tomcat就会销毁掉这个HttpSession。
			- HttpSession对象【空闲时间】的设置：
				/web/WEB-INF/web.xml
				<session-config>
					<session-timeout>5</session-timeout>  <!--当前网站中每一个session最大空闲时间5分钟-->
				</session-config>
		
十一、HttpServletRequest接口实现数据共享
		1. 介绍： 在同一个网站中，如果两个Servlet之间通过【请求转发】方式进行调用，彼此之间共享同一个请求协议包。而同一个请求协议包
		共享同一个请求对象。因此，可以通过这个请求对象在两个Servlet之间实现数据共享。
		
		OneServlet：
			request.setAttribute(key1,value1);
			request.getRequestDispatcher("/two").forward(request,response);//请求转发给TwoServlet
			
		TwoServlet：
			request.getAttribute(key1);// 获取OneServlet添加进去的key1的值

十二、 监听器接口
			1）介绍： 
				- 是一组Servlet规范下的接口，共有8个接口。存在于servlet-api.jar包中。
				- 监听器接口需要开发人员亲自实现，Http提供的jar包并没有对应的实现类。
				- 监听器用于监控【作用域对象生命周期变化时刻】以及【作用域对象共享数据变化时刻】
				
			2）作用域对象：
				在某些条件下为两个Servlet之间提供数据共享方案的对象，称为【作用域对象】
				
			3）在Servlet规范下的作用域对象
				1. ServletContext ： 全局作用域对象
				2. HttpSession ： 回话作用域对象
				3. HttpServletRequest： 请求作用域对象
			
			4） 监听器接口实现类开发规范：三步
				- 根据监听器实际情况，选择对应监听器接口进行实现
				- 重写监听器接口中声明【监听事件处理方法】
				- 在web.xml文件将监听器接口实现类注册到Http服务器。
			
			4. 实例：
				【ServletContextListener】监听器接口：
				
					作用：通过这个监听器合法的检测全局作用域对象被初始化时刻以及被销毁时刻。
					- 2个监听事件处理方法
						public void contextInitlized(); // 在全局作用于对象被Http服务器初始化时被调用
						public void contextDestory();// 在全局作用于对象被HTTP服务器销毁时被调用。
					- 监听器实现:
						项目下创建一个listener包-> 创建自己的监听器类-OneListener，这个类实现ServletContextListener接口，
						-> 重写这个接口里的contextInitlized和contextDestory方法。-> 将这个类交给HTTP服务器托管.
						这样就完成了一个简单的自定义的监听器的实现。
					 
				【ServletContextAttributeListener】监听器接口：
					- 作用： 可以合法的检测全局作用域对象共享数据的变化。
					- 监听事件处理方法：
							public void contextAdd(): // 在全局作用域对象添加共享数据时触发
							public void contextReplaced(): // 在全局作用域更新共享数据时触发
							public void contextRemove(): //在全局作用域删除共享数据时触发
				
					
十八、过滤器接口--Filter
	
	1. 介绍：来自于servlet-api.jar包中。由开发人员负责提供实现。Filter接口在Http服务器调用资源文件
	之前，对HTTP服务器进行拦截。
		
	2. 具体作用
		- 拦截Http服务器，帮助Http服务器检测当前请求的合法性。
		- 拦截HTTP服务器，对当前请求进行增强操作。 
		
	3. 实现：
		1）创建一个Java类，实现Filter接口
		2）重写Filter接口中的doFilter方法
		3）web.xml将过滤器接口实现类注册到Http服务器。
		
		过滤器详情：查看Servlet过滤器
	
完。
		
		
		
		
		